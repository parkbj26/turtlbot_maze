    def run(self):

        rate = rospy.Rate(60)

        scores = deque(maxlen=100)

        for e in range(self.n_episodes):

            init_state = self.env.reset()
            state = self.preprocess_state(init_state)

            done = False
            i = 0

            while not done:
                # openai_ros doesnt support render for the moment
                #self.env.render()

                action = self.choose_action(state, self.get_epsilon(e))
                next_state, reward, done, _ = self.env.step(action)
                next_state = self.preprocess_state(next_state)
                self.remember(state, action, reward, next_state, done)
                state = next_state
                i += 1

            self.replay(self.batch_size)

            self.update_weight_model()

            # SAVING
            if e % 3 == 0:
                self.save("my_maze")

                plotter_episode = LivePlot(self.outdir_monitor, x_label="episodes", y_label="accumulated rewards")
                plotter_episode.plot(full=True, dots=False, average=0, interpolated=0)

                plt_save_path = self.outdir_monitor + '/episode_vs_accumulated_reward.png'
                plt.savefig(plt_save_path)
                print ("Saved plot in " + plt_save_path)

            scores.append(i)
            mean_score = np.mean(scores)
            if mean_score >= self.n_win_ticks and e >= min_episodes:
                if not self.quiet: print('Ran {} episodes. Solved after {} trials'.format(e, e - min_episodes))
                return e - min_episodes
            if e % 1 == 0 and not self.quiet:
                print('[Episode {}] - Mean survival time over last {} episodes was {} ticks.'.format(e, min_episodes,
                                                                                                         mean_score))

            if not self.quiet: print('Did not solve after {} episodes'.format(e))
        return e
